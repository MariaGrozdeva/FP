#lang racket/base

(define (get-middle-of-list l)
  (if (= (length l) 1)
      1
      (if (= (remainder (length l) 2) 1)
          (+ (quotient (length l) 2) 1)
          (quotient (length l) 2) ) )
  )
(define (element-at-index l ind)
  (if (= ind 1)
      (car l)
      (element-at-index (cdr l) (- ind 1)) )
  )
(define (get-n-elements list n)
  (if (= n 1)
      '()
      (cons (car list) (get-n-elements (cdr list) (- n 1))) )
  )
(define (drop-n-elements list n)
  (if (= n 1)
      (cdr list)
      (drop-n-elements (cdr list) (- n 1)) )
  )

(define (construct-binary-search-tree sorted-list)
  (if (= (length sorted-list) 0)
      '()
      (list (element-at-index sorted-list (get-middle-of-list sorted-list))
            (construct-binary-search-tree (get-n-elements sorted-list (get-middle-of-list sorted-list)))
            (construct-binary-search-tree (drop-n-elements sorted-list (get-middle-of-list sorted-list))) ) )
  )